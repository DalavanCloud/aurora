---
- name: Install Postgres repository
  yum:
    name: "{{ pp_repository }}"
    state: present
  when: not 'production' in group_names
  always_run: true
  tags:
    - postgresql-server

- name: Ensure the temporary directory exists
  file:
    path: "{{ pp_temp_dir }}"
    recurse: yes
    state: directory
  tags:
    - postgresql-server

- name: Download and extract PostgresPlus Advanced Server installer
  get_url:
    url: "http://get.enterprisedb.com/ga/ppasmeta-{{ pp_installer_version }}-linux-x64.tar.gz"
    dest: "{{ pp_temp_dir }}/"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: 0777
  when: pp_install or pp_upgrade
  tags:
    - postgresql-server

- name: Create configuration file
  template:
    src: config_param.j2
    dest: "{{ pp_temp_dir }}/config_param"
    mode: 0600
  when: pp_install or pp_upgrade
  tags:
    - postgresql-server

- name: Ensure the install directory exists
  file:
    path: "{{ pp_prefix }}/{{ pp_install_path }}"
    state: directory
    owner: "{{ pp_serviceaccount }}"
    group: "{{ pp_serviceaccount }}"
    mode: 0700
  when: pp_install or pp_upgrade
    tags:
      - postgresql-server

- name: Ensure the log directory exists
  file:
    path: "{{ pp_xlogdir }}"
    state: directory
    owner: "{{ pp_serviceaccount }}"
    group: "{{ pp_serviceaccount }}"
    mode: 0755

- name: Ensure the data directory exists
  file:
    path: "{{ pp_datadir }}"
    state: directory
    owner: "{{ pp_serviceaccount }}"
    group: "{{ pp_serviceaccount }}"
    mode: 0700

- name: Run PostgresPlus install script
  shell: "{{ pp_temp_dir }}/ppasmeta-{{ pp_installer_version }}-linux-x64/ppasmeta-{{ pp_installer_version }}-linux-x64.run --optionfile {{ pp_temp_dir }}/config_param"
  args:
    chdir: "{{ pp_temp_dir }}"
    creates: "{{ pp_prefix }}/{{ pp_install_path }}/installer"
  notify:
    - restart postgres
    when: pp_install or pp_upgrade
  tags:
    - postgresql-server

- name: Configure postgres connection options
  template:
    src: pg_hba.conf.j2
    dest: "{{ pp_datadir }}/pg_hba.conf"
    group: "{{ pp_superaccount }}"
    owner: "{{ pp_superaccount }}"
    mode: 0600
  notify:
    - restart postgres
  when: install_ppas
  tags:
    - postgresql-server

- name: Configure PPAS server
  template:
    src: "{{ pp_config_template }}"
    dest: "{{ pp_datadir }}/postgresql.conf"
    group: "{{ pp_superaccount }}"
    owner: "{{ pp_superaccount }}"
    mode: 0600
  notify:
    - restart postgres
  when: install_ppas
  tags:
    - postgresql-server

# IF SSL is enabled, generate the cert and key
- name: Create SSL certificate request
  shell: "openssl req -nodes -new -text -subj \"{{ pp_ssl_string }}\" -out server.req"
  args:
    chdir: "{{ pp_datadir }}"
    creates: "{{ pp_datadir }}/server.req"
  when: pp_ssl_enable == 'on'
  tags:
    - postgresql-server

- name: Generate key
  shell: "openssl rsa -in privkey.pem -out server.key"
  args:
    chdir: "{{ pp_datadir }}"
    creates: "{{ pp_datadir }}/server.key"
  when: pp_ssl_enable == 'on'
  tags:
    - postgresql-server

- name: Generate cert
  shell: "openssl req -x509 -in server.req -text -key server.key -out server.crt"
  args:
    chdir: "{{ pp_datadir }}"
    creates: "{{ pp_datadir }}/server.crt"
  when: pp_ssl_enable == 'on'
  tags:
    - postgresql-server

- name: Ensure permissions are correct
  file:
    dest: "{{ pp_datadir }}/{{ item }}"
    owner: "{{ pp_serviceaccount }}"
    group: "{{ pp_serviceaccount }}"
  with_items:
    - privkey.pem
    - server.crt
    - server.key
    - server.req
  when: pp_ssl_enable == 'on'
  tags:
    - postgresql-server

- name: Change permissions on server.key
  file:
    dest: "{{ pp_datadir }}/server.key"
    mode: "og-rwx"
  when: pp_ssl_enable == 'on'
  when: install_ppas
  tags:
    - postgresql-server

- name: Set permissions on PPAS directory
  file:
    dest: "{{ pp_prefix }}/{{ pp_install_path }}"
    recurse: yes
    owner: "{{ pp_serviceaccount }}"
    group: "{{ pp_serviceaccount }}"
  when: install_ppas
  tags:
    - postgresql-server

- name: Copy the environment file
  become: yes
  become_method: sudo
  become_user: "{{ pp_serviceaccount }}"
  shell: "cat {{ pp_prefix }}/{{ pp_install_path }}/pgplus_env.sh >> {{ pp_prefix }}/{{ pp_install_path }}/.bash_profile"
  args:
    creates: "{{ pp_prefix }}/{{ pp_install_path }}/.bash_profile"

- name: Set ownership of environment file
  file:
    dest: "{{ pp_prefix }}/{{ pp_install_path }}/.bash_profile"
    owner: "{{ pp_serviceaccount }}"
    group: "{{ pp_serviceaccount }}"
    mode: 0600
  when: install_ppas
  tags:
    - postgresql-server

- name: Install extensions and supplementary packages
  yum:
    name: "{{ item }}"
    state: present
  with_items: pp_extensions
  when: install_ppas
  tags:
    - postgresql-server

- name: Create postgres cluster
  become: yes
  become_method: sudo
  become_user: "{{ pp_serviceaccount }}"
  shell: initdb --pgdata "{{ pp_datadir }}"
  when: pp_install or pp_upgrade
  tags:
    - postgresql-server

- name: Ensure new PPAS is stopoped
  service:
    name: "{{ pp_servicename }}"
    state: stopped
  when: pp_upgrade
  tags:
    - postgresql-server

- name: Ensure old PPAS is stopped
  service:
    name: "{{ pp_old_servicename }}"
    state: stopped
  when: pp_upgrade
  tags:
    - postgresql-server

- name: Run pg_upgrade
  shell: "pg_upgrade --old-datadir {{ pp_old_datadir }} --new-datadir {{ pp_datadir }} --user {{ pp_serviceaccount }} --old-bindir {{ pp_bin_path }} --new-bindir {{ pp_old_bin_path }} --old-port {{ pp_old_serverport }} --new-port {{ pp_serverport }}"
  when: pp_upgrade
  tags:
    - postgresql-server

- name: open up ports in iptables
  command: "iptables -I {{ iptables_chain }} 3 -p tcp -m tcp --dport {{ pp_serverport }} -j ACCEPT"
  when: iptables_config and deploy_iptables
  tags:
    - postgresql-server

- name: Save rules
  command: "/sbin/service iptables save"
  when: iptables_config and deploy_iptables
  tags:
    - postgresql-server

- name: Remove the temporary folder
  file:
    path: "{{ pp_temp_dir }}/ppasmeta-{{ pp_installer_version }}-linux-x64"
    state: absent
  tags:
    - postgresql-server

- name: Ensure PPAS is started
  service:
    name: "{{ pp_servicename }}"
    state: started
    enabled: yes
  when: install_ppas
  tags:
    - postgresql-server
